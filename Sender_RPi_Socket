# Given is code to create sockets, establish connection and send data collected from sensors to another RPi.
#The socket tries to reconnect with reciever if brokenpipe error occurs.

import socket
import time
import threading
import mpu6050
import RPi.GPIO as GPIO
import smbus
import statistics
from collections import deque

IP_ADDR = 'W.X.Y.Z' # You put your reiever RPi's IP addr.
SERVER_PORT = 12345

# MPU6050 Registers and Address
bus = smbus.SMBus(1)
DEVICE_ADDRESS = 0x68
mpu6050 = mpu6050.mpu6050(DEVICE_ADDRESS)

PWR_MGMT_1 = 0x6B
SMPLRT_DIV = 0x19
CONFIG = 0x1A
GYRO_CONFIG = 0x1B
INT_ENABLE = 0x38
ACCEL_ZOUT_H = 0x3F

# Thresholds and buffer size
BUFFER_SIZE = 5
STD_DEV_THRESH = 0.6

# MQ-3 Sensor Pin
MQ3_PIN = 17

# Initialize MPU6050
def MPUini():	
	bus.write_byte_data(DEVICE_ADDRESS, SMPLRT_DIV, 7)
	bus.write_byte_data(DEVICE_ADDRESS, PWR_MGMT_1, 1)
	bus.write_byte_data(DEVICE_ADDRESS, CONFIG, 0)
	bus.write_byte_data(DEVICE_ADDRESS, GYRO_CONFIG, 24)
	bus.write_byte_data(DEVICE_ADDRESS, INT_ENABLE, 1)

# Read raw data from MPU6050
def readMPU(addr):
	high = bus.read_byte_data(DEVICE_ADDRESS, addr)
	low = bus.read_byte_data(DEVICE_ADDRESS, addr + 1)
	value = ((high << 8) | low)
	return value - 65536 if value > 32768 else value

# Send data to server
def dataSend(ClientSocket):
	MPUini()
	vibrationRead = deque(maxlen=BUFFER_SIZE)
	GPIO.setmode(GPIO.BCM)
	GPIO.setup(MQ3_PIN, GPIO.IN)

	initalCn = 0
	sendCount = 0

	try:
		while True:
			# Read accelerometer Z-axis value
			zAcc = readMPU(ACCEL_ZOUT_H)
			Az = -1.0 * zAcc / 16384.0
			vibrationRead.append(Az)


			# Skip until buffer is filled
			if initalCn < BUFFER_SIZE:
				initalCn += 1
				continue

			# calculate standard deviation
			sDev = statistics.stdev(vibrationRead)
			
			# Send data every 5 iterations
			if sendCount == 9:
				temp = mpu6050.get_temp()

				if sDev > STD_DEV_THRESH:
					vib = 2 
				elif sDev < 0.05:
					vib = 0
				else:
					vib = 1

				if GPIO.input(MQ3_PIN) == GPIO.LOW:
					mst = 1
				else:
					mst = 0

				if temp < 33.5:
					temp = "Low" 
				else:
					temp = f"{temp:.2f}"

				# Prepare data to send
				if vib == 2 or temp != "Low" or mst == 1:
					data = f"1{vib}{mst}{temp}"
				else:
					data = "0"

				# Send data to server
				ClientSocket.send(data.encode())
				print("Sent to server:", data)

				sendCount = 0
			sendCount += 1

			time.sleep(0.1)
	except (socket.error, BrokenPipeError):
		print("Connection error. Reconnecting...")
		reconnect(ClientSocket)
	except Exception as e:
		print(f"Unexpected error: {e}")
	except KeyboardInterrupt:
		print("Program stopped by user.")
	finally:
		GPIO.cleanup()

# Receive data from server
def dataRec(ClientSocket):
	while True:
		try:
			data = ClientSocket.recv(1024).decode()
			if not data:
				print("Server closed the connection.")
				break
			print("Received from server:", data)
		except (socket.error, BrokenPipeError):
			print("Connection error. Reconnecting...")
			reconnect(ClientSocket)
			break
		except Exception as e:
			print(f"Unexpected error: {e}")
			break

# Reconnect to server
def reconnect(ClientSocket):
	try:
		ClientSocket.connect((IP_ADDR, SERVER_PORT))
		print(f"Reconnected to server {IP_ADDR}:{SERVER_PORT}.")
	except Exception as e:
		print(f"Reconnection failed: {e}")
		time.sleep(5)
		reconnect(ClientSocket)

# Start the client
def clinetStart():
	ClientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	try:
		ClientSocket.connect((IP_ADDR, SERVER_PORT))
		print(f"Connected to server {IP_ADDR}:{SERVER_PORT}.")

		threading.Thread(target=dataSend, args=(ClientSocket,), daemon=True).start()
		threading.Thread(target=dataRec, args=(ClientSocket,), daemon=True).start()

		while True:
			time.sleep(1)
	except Exception as e:
		print(f"Error connecting to server: {e}")
	finally:
		GPIO.cleanup()

if __name__ == "__main__":
	clinetStart()
