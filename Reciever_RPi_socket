# This file contains reciever side RPi code.
# Lights up Green bulb if everything is normal.
# Lights up Red if abnormal vibrations occur, Yellow if alocohol level is above intended threshold, violet if temperature rises above intended threshold.
# This lights can be considered as actuators and can be replaced with real industrial applications. 
# If something abnormal is seen, this RPi immediately sends data to PC of user.

import socket
import RPi.GPIO as GPIO
SER_IP = 'W.X.Y.Z' # Reciever RPi's IP addr.
PC_IP = 'A.B.C.D' # Reciever PC's IP addr.

GOOD_PIN = 26
VIB_PIN = 6
ACL_PIN = 13
TEMP_PIN = 19
GPIO.setmode(GPIO.BCM)  # BCM numbering
GPIO.setup(GOOD_PIN, GPIO.OUT)
GPIO.setup(VIB_PIN, GPIO.OUT)
GPIO.setup(ACL_PIN, GPIO.OUT)
GPIO.setup(TEMP_PIN, GPIO.OUT)

# Set up the socket server to receive data
def serverStart():
    sendIP = SER_IP
    sendPort = 12345
    # Create a new socket to send data to the second server
    pcIP = PC_IP
    pcPort = 12346
    # Create a socket object
    sendSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # Bind the server to the IP and port
    sendSocket.bind((sendIP, sendPort))

    # Listen for incoming connections
    sendSocket.listen(1)
    print(f"Listening on {sendIP}:{sendPort}...")

    while True:
        # Accept incoming connections
        inSocket, inAddr = sendSocket.accept()
        print(f"Connection from {inAddr}")

        # Handle the communication in a loop
        try:
            while True:
                data = inSocket.recv(1024).decode()
                if not data:
                    print(f"Connection lost from {inAddr}.")
                    break
                
                if data[0] == "0":
                    print("All Good")
                    GPIO.output(GOOD_PIN, GPIO.HIGH)
                    GPIO.output(VIB_PIN, GPIO.LOW)  
                    GPIO.output(ACL_PIN, GPIO.LOW)  
                    GPIO.output(TEMP_PIN, GPIO.LOW)  
                else:
                    GPIO.output(GOOD_PIN, GPIO.LOW)       
                                 
                    if data[1] == "2":
                        vib = "Abnormal"
                        GPIO.output(VIB_PIN, GPIO.HIGH)
                    elif data[1] == "1":
                        vib = "Normal"
                    else:
                        vib = "Off"
                        GPIO.output(VIB_PIN, GPIO.LOW)
                    
                    if int(data[2]):
                        alc = "Present"
                        GPIO.output(ACL_PIN, GPIO.HIGH) 
                    else:
                        alc = "Absent"
                        GPIO.output(ACL_PIN, GPIO.LOW) 
                    
                    temp = data[3:]
                    if temp == "Low":
                        GPIO.output(TEMP_PIN, GPIO.LOW)
                    else:
                        GPIO.output(TEMP_PIN, GPIO.HIGH) 
                        
                    data = f"Vibration : {vib}\tAlcohol Status : {alc}\tTemperature : {temp}"
                    print(data)                    
                    pcSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    pcSocket.connect((pcIP, pcPort))
                    pcSocket.send(data.encode())
                    pcSocket.close()  # Close the second socket after sending data
                    print("Abnormal behaviour, sent to PC")
                    
                # Send acknowledgment back to the client
                inSocket.send("Data received".encode())

        except (socket.error, BrokenPipeError) as e:
            print(f"Error while communicating with client: {e}")
        finally:
            GPIO.output(GOOD_PIN, GPIO.LOW)
            GPIO.output(VIB_PIN, GPIO.LOW)  
            GPIO.output(ACL_PIN, GPIO.LOW)  
            GPIO.output(TEMP_PIN, GPIO.LOW) 
            inSocket.close()  # Close the client socket after communication ends

if __name__ == "__main__":
    serverStart()
